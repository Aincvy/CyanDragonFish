// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameMsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gameMsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gameMsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gameMsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gameMsg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gameMsg_2eproto;
namespace cdf {
namespace msg {
class Account;
struct AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class GameMsgReq;
struct GameMsgReqDefaultTypeInternal;
extern GameMsgReqDefaultTypeInternal _GameMsgReq_default_instance_;
class GameMsgRes;
struct GameMsgResDefaultTypeInternal;
extern GameMsgResDefaultTypeInternal _GameMsgRes_default_instance_;
class ReqHello;
struct ReqHelloDefaultTypeInternal;
extern ReqHelloDefaultTypeInternal _ReqHello_default_instance_;
class ReqLoginAccount;
struct ReqLoginAccountDefaultTypeInternal;
extern ReqLoginAccountDefaultTypeInternal _ReqLoginAccount_default_instance_;
class ResHello;
struct ResHelloDefaultTypeInternal;
extern ResHelloDefaultTypeInternal _ResHello_default_instance_;
}  // namespace msg
}  // namespace cdf
PROTOBUF_NAMESPACE_OPEN
template<> ::cdf::msg::Account* Arena::CreateMaybeMessage<::cdf::msg::Account>(Arena*);
template<> ::cdf::msg::Empty* Arena::CreateMaybeMessage<::cdf::msg::Empty>(Arena*);
template<> ::cdf::msg::GameMsgReq* Arena::CreateMaybeMessage<::cdf::msg::GameMsgReq>(Arena*);
template<> ::cdf::msg::GameMsgRes* Arena::CreateMaybeMessage<::cdf::msg::GameMsgRes>(Arena*);
template<> ::cdf::msg::ReqHello* Arena::CreateMaybeMessage<::cdf::msg::ReqHello>(Arena*);
template<> ::cdf::msg::ReqLoginAccount* Arena::CreateMaybeMessage<::cdf::msg::ReqLoginAccount>(Arena*);
template<> ::cdf::msg::ResHello* Arena::CreateMaybeMessage<::cdf::msg::ResHello>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cdf {
namespace msg {

// ===================================================================

class GameMsgReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cdf.msg.GameMsgReq) */ {
 public:
  inline GameMsgReq() : GameMsgReq(nullptr) {}
  ~GameMsgReq() override;
  explicit PROTOBUF_CONSTEXPR GameMsgReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameMsgReq(const GameMsgReq& from);
  GameMsgReq(GameMsgReq&& from) noexcept
    : GameMsgReq() {
    *this = ::std::move(from);
  }

  inline GameMsgReq& operator=(const GameMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameMsgReq& operator=(GameMsgReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameMsgReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameMsgReq* internal_default_instance() {
    return reinterpret_cast<const GameMsgReq*>(
               &_GameMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameMsgReq& a, GameMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GameMsgReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameMsgReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameMsgReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameMsgReq& from) {
    GameMsgReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameMsgReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cdf.msg.GameMsgReq";
  }
  protected:
  explicit GameMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kCommandFieldNumber = 1,
  };
  // bytes content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 command = 1;
  void clear_command();
  int32_t command() const;
  void set_command(int32_t value);
  private:
  int32_t _internal_command() const;
  void _internal_set_command(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cdf.msg.GameMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int32_t command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gameMsg_2eproto;
};
// -------------------------------------------------------------------

class GameMsgRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cdf.msg.GameMsgRes) */ {
 public:
  inline GameMsgRes() : GameMsgRes(nullptr) {}
  ~GameMsgRes() override;
  explicit PROTOBUF_CONSTEXPR GameMsgRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameMsgRes(const GameMsgRes& from);
  GameMsgRes(GameMsgRes&& from) noexcept
    : GameMsgRes() {
    *this = ::std::move(from);
  }

  inline GameMsgRes& operator=(const GameMsgRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameMsgRes& operator=(GameMsgRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameMsgRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameMsgRes* internal_default_instance() {
    return reinterpret_cast<const GameMsgRes*>(
               &_GameMsgRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameMsgRes& a, GameMsgRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GameMsgRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameMsgRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameMsgRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameMsgRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameMsgRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameMsgRes& from) {
    GameMsgRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameMsgRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cdf.msg.GameMsgRes";
  }
  protected:
  explicit GameMsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kCommandFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // bytes content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 command = 1;
  void clear_command();
  int32_t command() const;
  void set_command(int32_t value);
  private:
  int32_t _internal_command() const;
  void _internal_set_command(int32_t value);
  public:

  // int32 error_code = 2;
  void clear_error_code();
  int32_t error_code() const;
  void set_error_code(int32_t value);
  private:
  int32_t _internal_error_code() const;
  void _internal_set_error_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cdf.msg.GameMsgRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int32_t command_;
    int32_t error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gameMsg_2eproto;
};
// -------------------------------------------------------------------

class ReqHello final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cdf.msg.ReqHello) */ {
 public:
  inline ReqHello() : ReqHello(nullptr) {}
  ~ReqHello() override;
  explicit PROTOBUF_CONSTEXPR ReqHello(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqHello(const ReqHello& from);
  ReqHello(ReqHello&& from) noexcept
    : ReqHello() {
    *this = ::std::move(from);
  }

  inline ReqHello& operator=(const ReqHello& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqHello& operator=(ReqHello&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqHello& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqHello* internal_default_instance() {
    return reinterpret_cast<const ReqHello*>(
               &_ReqHello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReqHello& a, ReqHello& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqHello* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqHello* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqHello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqHello>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqHello& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReqHello& from) {
    ReqHello::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqHello* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cdf.msg.ReqHello";
  }
  protected:
  explicit ReqHello(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kClientVersionFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string client_version = 2;
  void clear_client_version();
  const std::string& client_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_version();
  PROTOBUF_NODISCARD std::string* release_client_version();
  void set_allocated_client_version(std::string* client_version);
  private:
  const std::string& _internal_client_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_version(const std::string& value);
  std::string* _internal_mutable_client_version();
  public:

  // @@protoc_insertion_point(class_scope:cdf.msg.ReqHello)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gameMsg_2eproto;
};
// -------------------------------------------------------------------

class ResHello final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cdf.msg.ResHello) */ {
 public:
  inline ResHello() : ResHello(nullptr) {}
  ~ResHello() override;
  explicit PROTOBUF_CONSTEXPR ResHello(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResHello(const ResHello& from);
  ResHello(ResHello&& from) noexcept
    : ResHello() {
    *this = ::std::move(from);
  }

  inline ResHello& operator=(const ResHello& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResHello& operator=(ResHello&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResHello& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResHello* internal_default_instance() {
    return reinterpret_cast<const ResHello*>(
               &_ResHello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResHello& a, ResHello& b) {
    a.Swap(&b);
  }
  inline void Swap(ResHello* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResHello* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResHello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResHello>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResHello& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResHello& from) {
    ResHello::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResHello* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cdf.msg.ResHello";
  }
  protected:
  explicit ResHello(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerVersionFieldNumber = 1,
    kIsFullFieldNumber = 2,
  };
  // string server_version = 1;
  void clear_server_version();
  const std::string& server_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_version();
  PROTOBUF_NODISCARD std::string* release_server_version();
  void set_allocated_server_version(std::string* server_version);
  private:
  const std::string& _internal_server_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_version(const std::string& value);
  std::string* _internal_mutable_server_version();
  public:

  // bool is_full = 2;
  void clear_is_full();
  bool is_full() const;
  void set_is_full(bool value);
  private:
  bool _internal_is_full() const;
  void _internal_set_is_full(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cdf.msg.ResHello)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_version_;
    bool is_full_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gameMsg_2eproto;
};
// -------------------------------------------------------------------

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cdf.msg.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cdf.msg.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cdf.msg.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_gameMsg_2eproto;
};
// -------------------------------------------------------------------

class Account final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cdf.msg.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  ~Account() override;
  explicit PROTOBUF_CONSTEXPR Account(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Account& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Account& from) {
    Account::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cdf.msg.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:cdf.msg.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gameMsg_2eproto;
};
// -------------------------------------------------------------------

class ReqLoginAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cdf.msg.ReqLoginAccount) */ {
 public:
  inline ReqLoginAccount() : ReqLoginAccount(nullptr) {}
  ~ReqLoginAccount() override;
  explicit PROTOBUF_CONSTEXPR ReqLoginAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqLoginAccount(const ReqLoginAccount& from);
  ReqLoginAccount(ReqLoginAccount&& from) noexcept
    : ReqLoginAccount() {
    *this = ::std::move(from);
  }

  inline ReqLoginAccount& operator=(const ReqLoginAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqLoginAccount& operator=(ReqLoginAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqLoginAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqLoginAccount* internal_default_instance() {
    return reinterpret_cast<const ReqLoginAccount*>(
               &_ReqLoginAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReqLoginAccount& a, ReqLoginAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqLoginAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqLoginAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqLoginAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqLoginAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqLoginAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReqLoginAccount& from) {
    ReqLoginAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqLoginAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cdf.msg.ReqLoginAccount";
  }
  protected:
  explicit ReqLoginAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kRegisterFieldNumber = 2,
  };
  // .cdf.msg.Account account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::cdf::msg::Account& account() const;
  PROTOBUF_NODISCARD ::cdf::msg::Account* release_account();
  ::cdf::msg::Account* mutable_account();
  void set_allocated_account(::cdf::msg::Account* account);
  private:
  const ::cdf::msg::Account& _internal_account() const;
  ::cdf::msg::Account* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::cdf::msg::Account* account);
  ::cdf::msg::Account* unsafe_arena_release_account();

  // bool register = 2;
  void clear_register_();
  bool register_() const;
  void set_register_(bool value);
  private:
  bool _internal_register_() const;
  void _internal_set_register_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cdf.msg.ReqLoginAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cdf::msg::Account* account_;
    bool register__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gameMsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameMsgReq

// int32 command = 1;
inline void GameMsgReq::clear_command() {
  _impl_.command_ = 0;
}
inline int32_t GameMsgReq::_internal_command() const {
  return _impl_.command_;
}
inline int32_t GameMsgReq::command() const {
  // @@protoc_insertion_point(field_get:cdf.msg.GameMsgReq.command)
  return _internal_command();
}
inline void GameMsgReq::_internal_set_command(int32_t value) {
  
  _impl_.command_ = value;
}
inline void GameMsgReq::set_command(int32_t value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:cdf.msg.GameMsgReq.command)
}

// bytes content = 2;
inline void GameMsgReq::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& GameMsgReq::content() const {
  // @@protoc_insertion_point(field_get:cdf.msg.GameMsgReq.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameMsgReq::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cdf.msg.GameMsgReq.content)
}
inline std::string* GameMsgReq::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:cdf.msg.GameMsgReq.content)
  return _s;
}
inline const std::string& GameMsgReq::_internal_content() const {
  return _impl_.content_.Get();
}
inline void GameMsgReq::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* GameMsgReq::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* GameMsgReq::release_content() {
  // @@protoc_insertion_point(field_release:cdf.msg.GameMsgReq.content)
  return _impl_.content_.Release();
}
inline void GameMsgReq::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cdf.msg.GameMsgReq.content)
}

// -------------------------------------------------------------------

// GameMsgRes

// int32 command = 1;
inline void GameMsgRes::clear_command() {
  _impl_.command_ = 0;
}
inline int32_t GameMsgRes::_internal_command() const {
  return _impl_.command_;
}
inline int32_t GameMsgRes::command() const {
  // @@protoc_insertion_point(field_get:cdf.msg.GameMsgRes.command)
  return _internal_command();
}
inline void GameMsgRes::_internal_set_command(int32_t value) {
  
  _impl_.command_ = value;
}
inline void GameMsgRes::set_command(int32_t value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:cdf.msg.GameMsgRes.command)
}

// int32 error_code = 2;
inline void GameMsgRes::clear_error_code() {
  _impl_.error_code_ = 0;
}
inline int32_t GameMsgRes::_internal_error_code() const {
  return _impl_.error_code_;
}
inline int32_t GameMsgRes::error_code() const {
  // @@protoc_insertion_point(field_get:cdf.msg.GameMsgRes.error_code)
  return _internal_error_code();
}
inline void GameMsgRes::_internal_set_error_code(int32_t value) {
  
  _impl_.error_code_ = value;
}
inline void GameMsgRes::set_error_code(int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:cdf.msg.GameMsgRes.error_code)
}

// bytes content = 3;
inline void GameMsgRes::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& GameMsgRes::content() const {
  // @@protoc_insertion_point(field_get:cdf.msg.GameMsgRes.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameMsgRes::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cdf.msg.GameMsgRes.content)
}
inline std::string* GameMsgRes::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:cdf.msg.GameMsgRes.content)
  return _s;
}
inline const std::string& GameMsgRes::_internal_content() const {
  return _impl_.content_.Get();
}
inline void GameMsgRes::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* GameMsgRes::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* GameMsgRes::release_content() {
  // @@protoc_insertion_point(field_release:cdf.msg.GameMsgRes.content)
  return _impl_.content_.Release();
}
inline void GameMsgRes::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cdf.msg.GameMsgRes.content)
}

// -------------------------------------------------------------------

// ReqHello

// string token = 1;
inline void ReqHello::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& ReqHello::token() const {
  // @@protoc_insertion_point(field_get:cdf.msg.ReqHello.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqHello::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cdf.msg.ReqHello.token)
}
inline std::string* ReqHello::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:cdf.msg.ReqHello.token)
  return _s;
}
inline const std::string& ReqHello::_internal_token() const {
  return _impl_.token_.Get();
}
inline void ReqHello::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqHello::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqHello::release_token() {
  // @@protoc_insertion_point(field_release:cdf.msg.ReqHello.token)
  return _impl_.token_.Release();
}
inline void ReqHello::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cdf.msg.ReqHello.token)
}

// string client_version = 2;
inline void ReqHello::clear_client_version() {
  _impl_.client_version_.ClearToEmpty();
}
inline const std::string& ReqHello::client_version() const {
  // @@protoc_insertion_point(field_get:cdf.msg.ReqHello.client_version)
  return _internal_client_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqHello::set_client_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cdf.msg.ReqHello.client_version)
}
inline std::string* ReqHello::mutable_client_version() {
  std::string* _s = _internal_mutable_client_version();
  // @@protoc_insertion_point(field_mutable:cdf.msg.ReqHello.client_version)
  return _s;
}
inline const std::string& ReqHello::_internal_client_version() const {
  return _impl_.client_version_.Get();
}
inline void ReqHello::_internal_set_client_version(const std::string& value) {
  
  _impl_.client_version_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqHello::_internal_mutable_client_version() {
  
  return _impl_.client_version_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqHello::release_client_version() {
  // @@protoc_insertion_point(field_release:cdf.msg.ReqHello.client_version)
  return _impl_.client_version_.Release();
}
inline void ReqHello::set_allocated_client_version(std::string* client_version) {
  if (client_version != nullptr) {
    
  } else {
    
  }
  _impl_.client_version_.SetAllocated(client_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_version_.IsDefault()) {
    _impl_.client_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cdf.msg.ReqHello.client_version)
}

// -------------------------------------------------------------------

// ResHello

// string server_version = 1;
inline void ResHello::clear_server_version() {
  _impl_.server_version_.ClearToEmpty();
}
inline const std::string& ResHello::server_version() const {
  // @@protoc_insertion_point(field_get:cdf.msg.ResHello.server_version)
  return _internal_server_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResHello::set_server_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cdf.msg.ResHello.server_version)
}
inline std::string* ResHello::mutable_server_version() {
  std::string* _s = _internal_mutable_server_version();
  // @@protoc_insertion_point(field_mutable:cdf.msg.ResHello.server_version)
  return _s;
}
inline const std::string& ResHello::_internal_server_version() const {
  return _impl_.server_version_.Get();
}
inline void ResHello::_internal_set_server_version(const std::string& value) {
  
  _impl_.server_version_.Set(value, GetArenaForAllocation());
}
inline std::string* ResHello::_internal_mutable_server_version() {
  
  return _impl_.server_version_.Mutable(GetArenaForAllocation());
}
inline std::string* ResHello::release_server_version() {
  // @@protoc_insertion_point(field_release:cdf.msg.ResHello.server_version)
  return _impl_.server_version_.Release();
}
inline void ResHello::set_allocated_server_version(std::string* server_version) {
  if (server_version != nullptr) {
    
  } else {
    
  }
  _impl_.server_version_.SetAllocated(server_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_version_.IsDefault()) {
    _impl_.server_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cdf.msg.ResHello.server_version)
}

// bool is_full = 2;
inline void ResHello::clear_is_full() {
  _impl_.is_full_ = false;
}
inline bool ResHello::_internal_is_full() const {
  return _impl_.is_full_;
}
inline bool ResHello::is_full() const {
  // @@protoc_insertion_point(field_get:cdf.msg.ResHello.is_full)
  return _internal_is_full();
}
inline void ResHello::_internal_set_is_full(bool value) {
  
  _impl_.is_full_ = value;
}
inline void ResHello::set_is_full(bool value) {
  _internal_set_is_full(value);
  // @@protoc_insertion_point(field_set:cdf.msg.ResHello.is_full)
}

// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// Account

// string username = 1;
inline void Account::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& Account::username() const {
  // @@protoc_insertion_point(field_get:cdf.msg.Account.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cdf.msg.Account.username)
}
inline std::string* Account::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:cdf.msg.Account.username)
  return _s;
}
inline const std::string& Account::_internal_username() const {
  return _impl_.username_.Get();
}
inline void Account::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* Account::release_username() {
  // @@protoc_insertion_point(field_release:cdf.msg.Account.username)
  return _impl_.username_.Release();
}
inline void Account::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cdf.msg.Account.username)
}

// string password = 2;
inline void Account::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& Account::password() const {
  // @@protoc_insertion_point(field_get:cdf.msg.Account.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cdf.msg.Account.password)
}
inline std::string* Account::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:cdf.msg.Account.password)
  return _s;
}
inline const std::string& Account::_internal_password() const {
  return _impl_.password_.Get();
}
inline void Account::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* Account::release_password() {
  // @@protoc_insertion_point(field_release:cdf.msg.Account.password)
  return _impl_.password_.Release();
}
inline void Account::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cdf.msg.Account.password)
}

// -------------------------------------------------------------------

// ReqLoginAccount

// .cdf.msg.Account account = 1;
inline bool ReqLoginAccount::_internal_has_account() const {
  return this != internal_default_instance() && _impl_.account_ != nullptr;
}
inline bool ReqLoginAccount::has_account() const {
  return _internal_has_account();
}
inline void ReqLoginAccount::clear_account() {
  if (GetArenaForAllocation() == nullptr && _impl_.account_ != nullptr) {
    delete _impl_.account_;
  }
  _impl_.account_ = nullptr;
}
inline const ::cdf::msg::Account& ReqLoginAccount::_internal_account() const {
  const ::cdf::msg::Account* p = _impl_.account_;
  return p != nullptr ? *p : reinterpret_cast<const ::cdf::msg::Account&>(
      ::cdf::msg::_Account_default_instance_);
}
inline const ::cdf::msg::Account& ReqLoginAccount::account() const {
  // @@protoc_insertion_point(field_get:cdf.msg.ReqLoginAccount.account)
  return _internal_account();
}
inline void ReqLoginAccount::unsafe_arena_set_allocated_account(
    ::cdf::msg::Account* account) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.account_);
  }
  _impl_.account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cdf.msg.ReqLoginAccount.account)
}
inline ::cdf::msg::Account* ReqLoginAccount::release_account() {
  
  ::cdf::msg::Account* temp = _impl_.account_;
  _impl_.account_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cdf::msg::Account* ReqLoginAccount::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:cdf.msg.ReqLoginAccount.account)
  
  ::cdf::msg::Account* temp = _impl_.account_;
  _impl_.account_ = nullptr;
  return temp;
}
inline ::cdf::msg::Account* ReqLoginAccount::_internal_mutable_account() {
  
  if (_impl_.account_ == nullptr) {
    auto* p = CreateMaybeMessage<::cdf::msg::Account>(GetArenaForAllocation());
    _impl_.account_ = p;
  }
  return _impl_.account_;
}
inline ::cdf::msg::Account* ReqLoginAccount::mutable_account() {
  ::cdf::msg::Account* _msg = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:cdf.msg.ReqLoginAccount.account)
  return _msg;
}
inline void ReqLoginAccount::set_allocated_account(::cdf::msg::Account* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.account_ = account;
  // @@protoc_insertion_point(field_set_allocated:cdf.msg.ReqLoginAccount.account)
}

// bool register = 2;
inline void ReqLoginAccount::clear_register_() {
  _impl_.register__ = false;
}
inline bool ReqLoginAccount::_internal_register_() const {
  return _impl_.register__;
}
inline bool ReqLoginAccount::register_() const {
  // @@protoc_insertion_point(field_get:cdf.msg.ReqLoginAccount.register)
  return _internal_register_();
}
inline void ReqLoginAccount::_internal_set_register_(bool value) {
  
  _impl_.register__ = value;
}
inline void ReqLoginAccount::set_register_(bool value) {
  _internal_set_register_(value);
  // @@protoc_insertion_point(field_set:cdf.msg.ReqLoginAccount.register)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace cdf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gameMsg_2eproto
